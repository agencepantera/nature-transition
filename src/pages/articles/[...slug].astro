---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import SocialShare from '../../components/SocialShare.astro';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

interface Props {
  article: CollectionEntry<'articles'>;
  articles: CollectionEntry<'articles'>[];
}

export async function getStaticPaths() {
  const articles = await getCollection('articles');
  return articles.map((article: CollectionEntry<'articles'>) => ({
    params: { slug: article.slug },
    props: { article, articles },
  }));
}

const { article, articles } = Astro.props;
const { Content, headings } = await article.render();

// Trouver les articles recommandés (même catégorie, exclus l'article actuel)
const recommendedArticles = articles
  .filter((a: CollectionEntry<'articles'>) => 
    a.data.category === article.data.category && a.slug !== article.slug)
  .slice(0, 3);

// Si on n'a pas assez d'articles de la même catégorie, ajouter d'autres articles récents
if (recommendedArticles.length < 3) {
  const otherArticles = articles
    .filter((a: CollectionEntry<'articles'>) => 
      a.data.category !== article.data.category && a.slug !== article.slug)
    .sort((a: CollectionEntry<'articles'>, b: CollectionEntry<'articles'>) => 
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime())
    .slice(0, 3 - recommendedArticles.length);
  recommendedArticles.push(...otherArticles);
}

const formattedDate = format(new Date(article.data.pubDate), 'd MMMM yyyy', { locale: fr });

// Type pour les catégories
type CategoryColors = {
  [key in 'energie' | 'biodiversite' | 'developpement-durable' | 'agriculture' | 'transport' | 'dechets']: string;
};

const categoryColors: CategoryColors = {
  'energie': 'from-amber-500 to-amber-700',
  'biodiversite': 'from-emerald-500 to-emerald-700',
  'developpement-durable': 'from-green-500 to-green-700',
  'agriculture': 'from-lime-500 to-lime-700',
  'transport': 'from-sky-500 to-sky-700',
  'dechets': 'from-orange-500 to-orange-700'
};

const categoryName = {
  'energie': 'Énergie',
  'biodiversite': 'Biodiversité',
  'developpement-durable': 'Développement Durable',
  'agriculture': 'Agriculture',
  'transport': 'Transport',
  'dechets': 'Déchets'
};
---

<Layout title={article.data.title}>
  <!-- Hero Section with Gradient Overlay -->
  <div class="relative h-[60vh] min-h-[400px] mb-8">
    {article.data.image && (
      <div class="absolute inset-0">
        <img
          src={article.data.image}
          alt={article.data.title}
          class="w-full h-full object-cover"
        />
        <div class={`absolute inset-0 bg-gradient-to-b ${categoryColors[article.data.category] || 'from-gray-500 to-gray-700'} opacity-60`}></div>
      </div>
    )}
    
    <!-- Article Header Content -->
    <div class="relative h-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex flex-col justify-end h-full pb-16">
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white text-gray-800 mb-4 w-fit">
          {categoryName[article.data.category] || article.data.category}
        </span>
        <h1 class="text-4xl sm:text-5xl font-serif font-bold text-white mb-4 drop-shadow-lg">
          {article.data.title}
        </h1>
        <div class="flex items-center text-white">
          <div class="flex items-center">
            <img
              src="/images/marie.avif"
              alt={article.data.author}
              class="w-10 h-10 rounded-full border-2 border-white shadow-md"
            />
            <span class="ml-2 font-medium">{article.data.author}</span>
          </div>
          <span class="mx-4">•</span>
          <time datetime={new Date(article.data.pubDate).toISOString()} class="text-sm">
            {formattedDate}
          </time>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16">
    <div class="lg:grid lg:grid-cols-[1fr_250px] gap-8">
      <!-- Article Content -->
      <div class="prose prose-lg max-w-none">
        <!-- Description -->
        <p class="text-xl text-gray-500 mb-8">{article.data.description}</p>
        <Content />
      </div>

      <!-- Table of Contents -->
      <div class="hidden lg:block relative">
        <div class="sticky top-8 space-y-6">
          <div class="bg-white rounded-lg shadow-sm p-6">
            <TableOfContents headings={headings} />
          </div>
          <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">Partager l'article</h3>
            <SocialShare 
              title={article.data.title} 
              url={new URL(Astro.url.pathname, Astro.site).toString()}
              description={article.data.description}
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Recommended Articles -->
    <div class="mt-16 border-t border-gray-100 pt-16">
      <h2 class="text-3xl font-serif font-bold text-gray-900 mb-8">Articles recommandés</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {recommendedArticles.map((article: CollectionEntry<'articles'>) => (
          <a href={`/articles/${article.slug}`} class="group h-full">
            <article class="bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-all duration-200 h-full flex flex-col">
              <div class="relative h-48 shrink-0">
                {article.data.image && (
                  <img
                    src={article.data.image}
                    alt={article.data.title}
                    class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                  />
                )}
                <div class="absolute top-4 left-4">
                  <span class={`px-3 py-1 rounded-full text-sm font-medium bg-white text-gray-800`}>
                    {categoryName[article.data.category] || article.data.category}
                  </span>
                </div>
              </div>
              <div class="p-6 flex flex-col flex-grow">
                <h3 class="text-xl font-serif font-bold text-gray-900 mb-2 group-hover:text-green-700 transition-colors">
                  {article.data.title}
                </h3>
                <p class="text-gray-600 line-clamp-2 flex-grow">
                  {article.data.description}
                </p>
                <div class="mt-4 text-sm text-gray-500">
                  {format(new Date(article.data.pubDate), 'd MMMM yyyy', { locale: fr })}
                </div>
              </div>
            </article>
          </a>
        ))}
      </div>
    </div>
  </div>
</Layout>

<style is:global>
  /* Prose Customization */
  .prose {
    max-width: none;
  }
  
  /* Titre avec effet pinceau */
  .prose h2 {
    position: relative;
    display: inline-block;
    margin-top: 2em;
    margin-bottom: 1em;
    font-family: serif;
    padding: 0 5px;
  }
  
  .prose h2::before {
    content: "";
    position: absolute;
    left: -15px;
    right: -15px;
    bottom: -2px;
    height: 20px;
    background: linear-gradient(90deg, 
      rgba(167, 243, 208, 0.8) 0%,
      rgba(147, 197, 253, 0.8) 50%,
      rgba(253, 230, 138, 0.8) 100%
    );
    transform: rotate(-1deg);
    z-index: -1;
    border-radius: 30% 35% 30% 34%;
  }

  .prose h2:nth-of-type(2n)::before {
    background: linear-gradient(90deg,
      rgba(253, 230, 138, 0.8) 0%,
      rgba(167, 243, 208, 0.8) 50%,
      rgba(147, 197, 253, 0.8) 100%
    );
    transform: rotate(1deg);
    height: 22px;
    bottom: -4px;
  }

  .prose h2:nth-of-type(3n)::before {
    background: linear-gradient(90deg,
      rgba(147, 197, 253, 0.8) 0%,
      rgba(253, 230, 138, 0.8) 50%,
      rgba(167, 243, 208, 0.8) 100%
    );
    transform: rotate(-0.5deg);
    height: 24px;
    bottom: -3px;
  }
  
  /* Autres styles prose existants */
  .prose img {
    border-radius: 0.5rem;
  }
  
  .prose a {
    text-decoration: none;
    color: #059669;
    transition: color 0.2s;
  }
  
  .prose a:hover {
    color: #065f46;
  }
  
  .prose pre {
    background-color: #1f2937;
    color: #e5e7eb;
    padding: 1rem;
    border-radius: 0.5rem;
  }
  
  .prose code {
    color: #059669;
    background-color: #f3f4f6;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
  }
  
  .prose blockquote {
    border-left-color: #059669;
  }

  /* Smooth Scroll for ToC */
  html {
    scroll-behavior: smooth;
  }

  /* Custom Scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  ::-webkit-scrollbar-thumb {
    background: #10b981;
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #059669;
  }

  /* Line Clamp */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
